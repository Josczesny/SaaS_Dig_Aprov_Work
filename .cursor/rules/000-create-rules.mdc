---
alwaysApply: true

---
description: Guia para criação e padronização de arquivos .mdc no projeto
globs:
  - ".cursor/rules/*.mdc"

  tags: [meta, padrão]
priority: 1
version: "1.0"
---

# Meta‑Regra: Criação de Regras

## Uso
Use este arquivo como base para estruturar corretamente qualquer nova regra .mdc no projeto.

## Diretrizes
1. Arquivos devem estar em `.cursor/rules/`.
2. Nomes com `kebab-case` e extensão `.mdc`.
3. Sempre inclua:
   - `description`: clara e objetiva.
   - `globs`: escopo de ativação.
   - `tags`, `priority`, `version`: para controle e ordenação.
4. Corpo da regra deve conter:
   - **Contexto** do uso.
   - **Requisitos funcionais**.
   - **Exemplos válidos e inválidos** com `<example>` e `type="invalid"` quando necessário.

## Estrutura Exemplo
\`\`\`md
---
description: Valida dados de cadastro
globs:
  - "src/modules/user/*.js"
alwaysApply: false
tags: [cadastro, validação]
priority: 2
version: "1.0"
---

# Validação de Dados

## Contexto
Aplicado a todos os formulários de cadastro.

## Requisitos
- Campo `email` deve ser válido.
- Campo `CPF` deve ter 11 dígitos.
- Retornar erro 400 em caso de falha.

## Exemplos

<example title="Entrada válida">
{
  "email": "joao@example.com",
  "cpf": "12345678901"
}
</example>

<example type="invalid" title="CPF inválido">
{
  "email": "joao@example.com",
  "cpf": "123"
}
</example>
\`\`\`

## Observação
Prefixos numéricos (`000-`, `100-`, `200-`) ajudam a manter a ordem e legibilidade dos arquivos.
MD;
---
